{"version":3,"file":"cdMultivalues-D98HZN59.js","sources":["../../../Client/src/components/cdMultivalues.ts"],"sourcesContent":["import { customElement, html, nothing, property, repeat, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\nimport { tagPrefix } from \"../constants\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\n\r\nexport type CdMultiValueModelDto = {\r\n    value: string,\r\n    show: string,\r\n    hide: string,\r\n}\r\nexport type CdMultiValueModel = CdMultiValueModelDto & {\r\n    sortOrder: number,\r\n    id: number\r\n}\r\n\r\nexport const elementName = `${tagPrefix}-multivalues`;\r\n\r\n@customElement(elementName)\r\nexport class CdMultivaluesElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n    @property({ type: Array, attribute: false })\r\n    public value?: Array<CdMultiValueModelDto> | undefined;\r\n\r\n    private _items: Array<CdMultiValueModel> = [];\r\n    @state()\r\n    private get items(): Array<CdMultiValueModel> {\r\n        return this._items;\r\n    }\r\n    private set items(value: Array<CdMultiValueModel>) {\r\n        this._items = value;\r\n\r\n        const dtoItems: Array<CdMultiValueModelDto> = this._items.map(x => ({ value: x.value, show: x.show, hide: x.hide }));\r\n        this.value = dtoItems;\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n    }\r\n\r\n    @state()\r\n    private liveItem!: CdMultiValueModelDto;\r\n\r\n    override connectedCallback(): void {\r\n        super.connectedCallback();\r\n        setTimeout(() => {\r\n            this.initValue();\r\n        }, 0);\r\n    }\r\n\r\n    private initValue() {\r\n        let items: Array<CdMultiValueModel> = [];\r\n        if (this.value) {\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const dtoItem = this.value[i] as unknown as CdMultiValueModelDto;\r\n                const item: CdMultiValueModel = { id: i, sortOrder: i, ...dtoItem };\r\n                items.push(item);\r\n            }\r\n            this.augmentItemValues(items);\r\n\r\n            // sort items by stored value\r\n            items = items.sort((a, b) => a.sortOrder > b.sortOrder ? 1 : ((b.sortOrder > a.sortOrder) ? -1 : 0));\r\n\r\n            // update editor value\r\n            this.items = items;\r\n        }\r\n\r\n        this.liveItem = this.getEmptyItem();\r\n    }\r\n\r\n    private augmentItemValues(items?: Array<CdMultiValueModel>) {\r\n        items = items || this.items;\r\n        for (let i = 0; i < items.length; i++) {\r\n            items[i].id = i;\r\n            items[i].sortOrder = i;\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    #onItemInput(event: InputEvent) {\r\n        const rowEl = (event.target as HTMLElement).closest('[data-id]') as HTMLElement;\r\n        const itemId = parseInt(rowEl.dataset.id!);\r\n        const itemValue = this.getItemValueFromRow(rowEl);\r\n        const index = this.items.findIndex(x => x.id === itemId);\r\n        this.items[index] = { ...this.items[index], ...itemValue };\r\n    }\r\n    #onLiveItemInput(event: InputEvent) {\r\n        const rowEl = (event.target as HTMLElement).closest('#liveItemRow') as HTMLElement;\r\n        const itemValue = this.getItemValueFromRow(rowEl);\r\n        this.liveItem = { value: itemValue.value, show: itemValue.show, hide: itemValue.hide };\r\n    }\r\n    #onAdd() {\r\n        // TODO: validate\r\n        this.items.push({ id: 0, sortOrder: 0, ...this.liveItem });\r\n        this.augmentItemValues();\r\n        this.items = this.items;    // trigger set action\r\n        this.liveItem = this.getEmptyItem();\r\n    }\r\n    #onRemove(event: Event) {\r\n        const rowEl = (event.target as HTMLElement).closest('[data-id]') as HTMLElement;\r\n        const itemValue = this.getItemValueFromRow(rowEl);\r\n        const index = this.items.findIndex(x => x.id === itemValue.id);\r\n        this.items.splice(index, 1);\r\n        this.items = this.items;    // trigger set action\r\n    }\r\n\r\n    private getEmptyItem(): CdMultiValueModelDto {\r\n        return {\r\n            value: \"\",\r\n            show: \"\",\r\n            hide: \"\"\r\n        };\r\n    }\r\n    private getItemValueFromRow(el: HTMLElement): CdMultiValueModel {\r\n        const val: Partial<CdMultiValueModel> = {};\r\n        const inputEls = el.querySelectorAll('uui-input');\r\n        inputEls.forEach(inputEl => {\r\n            const name = inputEl.name;\r\n            // @ts-ignore\r\n            val[name] = inputEl.value;\r\n        });\r\n\r\n        // parseInt is 'null' if passed 'undefined'\r\n        val.id = parseInt(el.dataset.id!);\r\n        val.sortOrder = parseInt(el.dataset.sort!);\r\n\r\n        return val as Required<CdMultiValueModel>;\r\n    }\r\n\r\n    render() {\r\n        if (!this.liveItem) {\r\n            return nothing;\r\n        }\r\n\r\n        return html`\r\n        <uui-box style=\"--uui-box-default-padding: 0;\">\r\n            <uui-table>\r\n                <uui-table-column style=\"width: 30%;\"></uui-table-column>\r\n                <uui-table-column style=\"width: 30%;\"></uui-table-column>\r\n                <uui-table-column style=\"width: 30%;\"></uui-table-column>\r\n                <uui-table-column style=\"width: 10%;\"></uui-table-column>\r\n                <uui-table-head>\r\n                    <uui-table-head-cell>Value</uui-table-head-cell>\r\n                    <uui-table-head-cell>Show when selected</uui-table-head-cell>\r\n                    <uui-table-head-cell>Hide when selected</uui-table-head-cell>\r\n                    <uui-table-head-cell></uui-table-head-cell>\r\n                </uui-table-head>\r\n                <uui-table-row id=\"liveItemRow\" @input=${this.#onLiveItemInput}>\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"value\" type=\"text\" .value=${this.liveItem.value}></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"show\" type=\"text\" placeholder=\"Properties' aliases\" .value=${this.liveItem.show}></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"hide\" type=\"text\" placeholder=\"Properties' aliases\" .value=${this.liveItem.hide}></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-button label=\"Add\" @click=${this.#onAdd}></uui-button>\r\n                    </uui-table-cell>\r\n                </uui-table-row>\r\n                ${repeat(this.items, x => x.id, x => html`\r\n                <uui-table-row data-id=${x.id} data-sort=${x.sortOrder} @input=${this.#onItemInput} style=\"background: #f3f3f5;\">\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"value\" type=\"text\" .value=${x.value} ></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"show\" type=\"text\" placeholder=\"Properties' aliases\" .value=${x.show}></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-input name=\"hide\" type=\"text\" placeholder=\"Properties' aliases\" .value=${x.hide}></uui-input>\r\n                    </uui-table-cell>\r\n                    <uui-table-cell>\r\n                        <uui-button label=\"Remove\" @click=${this.#onRemove}></uui-button>\r\n                    </uui-table-cell>\r\n                </uui-table-row>\r\n                `)}\r\n            </uui-table>\r\n        </uui-box>\r\n        `;\r\n    }\r\n}\r\n\r\nexport default CdMultivaluesElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        [elementName]: CdMultivaluesElement;\r\n    }\r\n}\r\n"],"names":["_CdMultivaluesElement_instances","onItemInput_fn","onLiveItemInput_fn","onAdd_fn","onRemove_fn","elementName","tagPrefix","CdMultivaluesElement","UmbLitElement","__privateAdd","value","dtoItems","x","UmbPropertyValueChangeEvent","items","i","dtoItem","item","a","b","el","val","inputEl","name","html","__privateMethod","repeat","nothing","event","rowEl","itemId","itemValue","index","__decorateClass","property","state","customElement","CdMultivaluesElement$1"],"mappings":"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"}